
https://repo1.maven.org/maven2/org/apache/xmlrpc/xmlrpc-client/3.1.3/

https://repo1.maven.org/maven2/org/apache/ws/commons/ws-commons-util/1.0.1/

https://repo1.maven.org/maven2/org/apache/xmlrpc/xmlrpc-server/3.1.3/

https://repo1.maven.org/maven2/org/apache/xmlrpc/xmlrpc-common/3.1.3/

https://repo1.maven.org/maven2/commons-logging/commons-logging/1.2/
==================================================================================================================
XMLRPC
---------------------------
client
-----------------------------
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;

import java.net.URL;
import java.util.Vector;

public class JavaClient {

    public static void main(String[] args) {
        try {
            // Configure the XML-RPC client with the server URL
            XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
            config.setServerURL(new URL("http://localhost:8080/RPC2"));

            XmlRpcClient client = new XmlRpcClient();
            client.setConfig(config);

            // Prepare the parameters to send to the server
            Vector<Integer> params = new Vector<>();
            params.addElement(17);  // First parameter
            params.addElement(13);  // Second parameter

            // Make the call to the server and receive the result
            Object result = client.execute("sample.sum", params);

            // Cast the result to the appropriate type and print the sum
            int sum = (Integer) result;
            System.out.println("The sum is: " + sum);

        } catch (Exception e) {
            System.err.println("JavaClient: " + e.getMessage());
            e.printStackTrace();
        }
    }
}


----------------------
server
---------------------
import org.apache.xmlrpc.server.PropertyHandlerMapping;
import org.apache.xmlrpc.server.XmlRpcServer;
import org.apache.xmlrpc.webserver.WebServer;

public class JavaServer {

    // Define the sum method that will be accessible to XML-RPC clients
    public Integer sum(int x, int y) {
        return x + y;
    }

    public static void main(String[] args) {
        try {
            // Start the XML-RPC server on port 8080
            System.out.println("Attempting to start XML-RPC Server...");
            WebServer server = new WebServer(8080);
            XmlRpcServer xmlRpcServer = server.getXmlRpcServer();

            // Create a PropertyHandlerMapping to register the handler
            PropertyHandlerMapping mapping = new PropertyHandlerMapping();
            mapping.addHandler("sample", JavaServer.class);

            // Set the handler mapping to the server
            xmlRpcServer.setHandlerMapping(mapping);
            server.start();

            System.out.println("Server started successfully on port 8080.");
            System.out.println("Accepting requests. (Press Ctrl+C to stop the server)");

        } catch (Exception e) {
            System.err.println("JavaServer: " + e.getMessage());
            e.printStackTrace();
        }
    }
}


------
add dependencies-f4-dependencies-plus-complie(check)-apply-ok-rebuild
run server pgm
run client pgm-output-sum is 30
=====================================================================================================================
RMI
----------
Hello.java 

import java.rmi.Remote;
import java.rmi.RemoteException;

public interface Hello extends Remote {
    String sayHello() throws RemoteException;
}

--------------
Helloimpl.java

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class HelloImpl extends UnicastRemoteObject implements Hello {

    protected HelloImpl() throws RemoteException {
        super();
    }

    @Override
    public String sayHello() throws RemoteException {
        return "Hello, World!";
    }
}
-------------
HelloServer.java

import java.rmi.Naming;
import java.rmi.registry.LocateRegistry;

public class HelloServer {
    public static void main(String[] args) {
        try {
            Hello hello = new HelloImpl();

            LocateRegistry.createRegistry(1099);

            Naming.rebind("rmi://localhost:1099/Hello", hello);

            System.out.println("HelloServer is running...");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
--------------
HelloClient.java

import java.rmi.Naming;

public class HelloClient {
    public static void main(String[] args) {
        try {
            Hello hello = (Hello) Naming.lookup("rmi://localhost:1099/Hello");

            String response = hello.sayHello();

            System.out.println("Response from server: " + response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

